{"pageProps":{"posts":[{"slug":"2021-03-19-on-wrong-assumptions","title":"On wrong assumptions","subtitle":"How I once spent two weeks barking up the wrong tree","image":{"url":"./screenshot.jpg","alt":"A shot of the screen displaying the diff of the fix"},"content":"\n*The original version of this post was published as a [Twitter thread on March 23rd 2020](https://twitter.com/foosel/status/1242121324438355974). I figured I should give it a more permanent home here since IMHO it was a quite fun story.*\n\nSince everyone can use some entertainment right now, how about a battle story on how a year ago I spent almost two weeks trying to wrap my head around a really weird issue of a lagging GCODE viewer and overall print progress reporting in [OctoPrint](https://octoprint.org) and finally figuring it out?\n\nOur story begins around the release of 1.4.0, when [a new topic on the community forum](https://community.octoprint.org/t/curious-issue-with-print-progress/16304) showed up:\n\n> ### Curious issue with print progress \n>\n> The print progress figures on my Octopi setup are lagging behind the actual print. [...] Nothing is broken - anything I throw at it (an Ender 3) prints fine but as a print progresses, the percentage complete, current layer, and sync'd gcode viewer gradually lag behind what is actually being printed. For example, on a print with 400 layers, as the last layer is printed the reported progress and current layer is around 96% and 385 respectively. If I do a quick calculation of the displayed Printed/Total file size figures it works out at 96% but what it has actually printed is over 99%. When the print finishes the numbers jump to 100% and 400 and everything is fine.\n>\n> [...]\n\nThis was indeed a very curious issue, since due to the nature of the communication with the printer and buffering in the firmware the progress is usually rather slightly *ahead* than behind. Some quick testing on my end showed no reproduction, however more and more people chimed in with the same observation. \n\nI was stumped.\n\nMy first approach was to collect information from those affected by it. Printer model, firmware version, installed plugins, used slicer and so on. It soon turned out that all affected installations were using Ultimaker Cura as the slicer.\n\nA quick test by the OP with a different slicer confirmed that it indeed just occurred with GCODE sliced by Cura for him, same file in another slicer had everything work as designed. However, comparing the GCODE revealed no immediate differences that would explain this, and what actually is *in* the file also doesn't really play into progress tracking. My own experiments with Cura failed to reproduce.\n\nConvinced that the issue must be some sort of delay between the backend and the frontend -- maybe due to network issues? -- I whipped up a plugin (since deleted) to log progress on both ends to a log which could then be shared and analysed. The first results came in an guess what? I had barked up the wrong tree, the reported progress was identical. So back to square one.\n\nI still couldn't reproduce it on my end and was starting to get really angry at this issue ðŸ˜… I finally threw a copy of some GCODE files now shared by the reporter of the issue on my own printer and *finally* I could reproduce. Which doesn't mean I had any idea WTF was going on though.\n\nAfter many test prints, head scratching and going through the files with a comb I finally noticed something. The files with the issue had `CRLF` (or `\\r\\n`) line endings. Those without (including my own sliced files) had just `LF` (or `\\n`) line endings.\n\nSo that made me go ðŸ¤¨ Some cursing and breakpoint setting later I had proof that the reported progress in backend and frontend was flawed to begin with. I could see that a line was being reported with a file position that it actually was not located at in the file, and which instead belonged to a couple lines earlier. Which meant my positions were reported wrong right at the source -- with a lag. And then it suddenly hit me.\n\nBut before I can tell you what was happening I need to give you some background on how OctoPrint reads GCODE files it's printing in order to understand what was going on. Printed files are read line by line because that is how they are sent to the printer. For that OctoPrint uses the [`readline`](https://docs.python.org/3/library/io.html?highlight=readline#io.IOBase.readline) method of the file stream. And that works by reading chunks of data from the file until a line separator is found, returning everything read up to this separator and saving the rest for the next line to be read. That means the file will have to be read further than what is returned. And that means that the position in the open file as reported by [`tell`](https://docs.python.org/3/library/io.html?highlight=readline#io.IOBase.tell) on the file stream will always be slightly ahead. For progress reporting in OctoPrint however I need to know the exact byte position of each line in the file. So what I do instead of relying on the internal and slightly ahead file position is that I increase my own position indicator by the length of the line read from the file. And this is where my problem was located. \n\nIt turns out that for some reason I wasn't getting the lines back from `readline` with the original line endings attached. Instead I always got `LF`, even for files with `CRLF`. And that means I was counting one byte short for every single line in `CRLF` terminated files. One byte short per line doesn't sound like much, but that adds up through a file with several hundred thousands of lines, to a point where progress reporting will be off by whole layers the further in the print and thus the file you are.\n\nBut what was the reason for this popping up in 1.4.0? I hadn't modified the code in question at all. It had been the same since 2016 actually. Well, it turns out that a tiny change during the Python 3 compatibility migration done to a helper function I used in that code had interesting side effects: switching from [`codecs.open`](https://docs.python.org/3/library/codecs.html#codecs.open) to [`io.open`](https://docs.python.org/3/library/io.html#io.open). \n\nIt turns out that `io.open` (and thus Python 3's built-in `open`) by default will open text files in \"universal newlines mode\" (see [PEP278](https://www.python.org/dev/peps/pep-0278/)), meaning it will happily parse every common line ending, but convert it to `LF` before returning. Which caused my off-by-one issue in files with `CRLF`.\n\nAnd the fix? [Setting `newline=\"\"` on the open call](https://github.com/foosel/OctoPrint/commit/27bbab9582eb3a1a9fca8f2b203e88b1682fcdc5): \n\n``` diff\ndiff --git a/src/octoprint/util/comm.py b/src/octoprint/util/comm.py\nindex 67191a7af..a6dfc1e24 100644\n--- a/src/octoprint/util/comm.py\n+++ b/src/octoprint/util/comm.py\n@@ -4078,7 +4078,7 @@ def start(self):\n \t\t\"\"\"\n \t\tPrintingFileInformation.start(self)\n \t\twith self._handle_mutex:\n-\t\t\tself._handle = bom_aware_open(self._filename, encoding=\"utf-8\", errors=\"replace\")\n+\t\t\tself._handle = bom_aware_open(self._filename, encoding=\"utf-8\", errors=\"replace\", newline=\"\")\n \t\t\tself._pos = self._handle.tell()\n \t\t\tif self._handle.encoding.endswith(\"-sig\"):\n \t\t\t\t# Apparently we found an utf-8 bom in the file.\n```\n\nThe moral of the story? Don't trust your file position calculations. I could have saved myself a lot of time on debugging this if I had just looked there *first* instead of assuming this code to be fine ðŸ˜…\n\nIn the end, even a year later, I still have no idea why Cura produced CRLF code for some and LF for me, but I also never really looked hard. A UNIX vs Windows issue can be ruled out here since the affected parties and me were all using Windows. It made me learn something about `io.open` and was a valuable lesson on wrong assumptions however!","excerpt":"","published":"2021-03-19T00:00:00Z","readingtime":{"text":"7 min read","minutes":6.035,"time":362100,"words":1207}},{"slug":"2021-03-13-my-workplace","title":"My workplace setup","subtitle":"How I try to keep backpain and RSI at bay","image":{"url":"./office.jpg","alt":"My workplace - three monitors, desk, chair, keyboard, mouse, trackball"},"content":"\nI've been working full time from my home office since mid-2014 now. At the time of writing this post this is nearing 7 years. Naturally, considering how much time I spend there, I've also spent a lot of thought and money on making sure my workplace helps to keep the usual side effects of the mostly sedentary lifestyle of a developer at bay.\n\nOver the years I've had some run ins with RSI and backpain. My first wrist issues developed more than 10 years ago. Pain in my lower back beyond \"all fine again after a good night's sleep\" started in February of 2014. Both have been repeating visitors since then. You can probably imagine that that has led to a lot of research and experimentation to see what works and what doesn't for me. So, here's a summary of my findings as of March 2021. Quick disclaimer though, this is what has proven to work for **me**, that doesn't mean it will work for you, if in doubt please consult a professional. Also, I do link to some products here -- consider those references to give you more details on my setup, not official endorsement or anything like that.\n\n## Keyboard and mouse\n\nFor my wrists, **ergonomic keyboards** have proven to be crucial in combating the dreaded pain and numbness. I started with a [Microsoft Natural Ergonomic Keyboard 4000](https://www.microsoft.com/en-us/p/natural-ergonomic-keyboard-4000/) (what a name...), switched over to an [Microsoft Ergo Sculpt](https://www.microsoft.com/en-us/p/microsoft-sculpt-ergonomic-desktop/), had a quick detour over a regularly shaped [Ducky One TKL](https://www.duckychannel.com.tw/en/Ducky-One-RGB-TKL) to get my feet wet in mechanical keyboards and these days have arrived at the 1st gen [Ultimate Hacking Keyboard](https://ultimatehackingkeyboard.com/). It's a mechanical split keybord, sized at 60% (which means it has less keys than your common 101-key keyboard, only 60% of them to be precise, and compensates for that with the use of layers reached through modified keys) and fully programmable. I'm still optimizing the macros I have configured on it. I got it with red switches (linear and non clicky, I can't stand keyboards I can't use while holding a conversation ;)) and put a Git-themed keyset on it which I absolutely adore. And it's finally made me switch to US ANSI layout, which indeed is way better suited for coding than ISO DE. The UHK also supports some additional modules, and I have a trackpoint and an additional thumb keycluster on order once they finally release.\n\n![Closeup of my Ultimate Hacking Keyboard](./keyboard.jpg)\n\nNo matter how good you can memorize keyboard shortcuts (or how well the mouse layer of the UHK works), you still also need a **mouse**. In my case that's been gaming mice exclusively for 15+ years now, with a ton of turnover due to wear out or quality issues. Currently I'm sporting a [Steelseries Rival 310](https://steelseries.com/gaming-mice/rival-310) after my last mouse, a Roccat Kone XTD, developed a flaky mouse wheel I couldn't fix, even though I tried my best. Apparently a design flaw. The Steelseries has so far worked nicely, but I've only had it for less than six months at the time of writing this. It's an asymmetric mouse tailored for use with the right hand. I can reach the side buttons easily and it isn't too heavy or too light either.\n\nI also have a **trackball** though, dedicated to be used with my _left_ hand. Whenever I notice my right wrist acting up, I switch to exclusive trackball use for a while, and that has managed to still avert Bad Things a number of times now. If you find yourself regularly suffering from RSI issues on your mouse hand, I can really recommend to mix things up with a trackball on your left. Personally I got a [Kensington Slimblade](https://www.kensington.com/p/products/electronic-control-solutions/trackball-products/slimblade-trackball/). It's symmetrical and the buttons are easily remapped to fit a left hand operation. And the huge ball can also be used as a scrollwheel and is actually also a great fidget toy to have on the desk at all times ;)\n\n## Desk and chair\n\nIn my opinion, there are two pieces of furniture you should never cheap out on: your **office chair** and your bed. I bought my [sedus netwin](https://www.sedus.com/en/products/chairs/netwin) office chair right after finishing university in 2007 and apart from having gotten a bit more dirty here and there it's as good as new. I initially got it with a set of arm rests, but quickly figured out that those were actually detrimental to my posture and made me pull my shoulders up, leading to tension related pain. So I removed them. I've also gotten it a bit more pronounced lumbar support through the aid of [an add-on](https://www.amazon.de/gp/product/B07PB7G3QJ/), the likes of which you can order online for less than 10â‚¬ a piece. If I were to buy a new chair today, I'd probably get one with a head rest to keep me a bit more from slouching during long debugging or gaming sessions, but all in all I'm still completely happy with it, and the mesh back has proven to make sitting on it on hot summer days more bearable.\n\n![My office chair, with a lumbar support addon](./chair.jpg)\n\nI've now had an **electric standing desk** since January 2016. I'm currently trying to get into the habit of daily use of the standing mode again and so far it's looking good. I got the [IKEA Bekant](https://www.ikea.com/de/de/p/bekant-schreibtisch-sitz-steh-weiss-s69022537/) desk, and have since modified it to use the alternative [Megadesk](https://github.com/gcormier/megadesk) controller to give it position memory slots (and hopefully also to hook it up into my home automation system long term). I can't stress enough what a difference it can make to just stand for a while during your work day. Exclusively standing should definitely also be avoided (I've had to do this recently for a couple of days because my back would _not_ take sitting for an answer anymore, and it did a bit of a number on my ankles and knees), but regularly switching between sitting and standing is a great way not only to keep your posture intact but also to just get back your concentration. I currently work sitting until my lunch break, then switch to a couple hours of standing before either returning to sitting or calling it a day.\n\nSpeaking of sitting and standing -- I also recently acquired a bunch of accessories to make that more dynamic. While standing, I now regularly plant my feet on a **balance board** (a [Gymba](https://www.my-gymba.de/en) one in my case). It allows me to move while standing, to vary my stance more easily and frankly, it's also a ton of fun to seesaw back and forth while working. I use it with shoes - you can also use it barefoot/in socks, but frankly that was a bit to tough a surface or my feet. Your mileage may vary of course.\n\nI also got myself a **wobble stool** from [Flexispot](https://www.flexispot.com/height-adjustable-wobble-stool-bh1b). Imagine a stool, but instead of being stable it has a rounded base that makes it constantly wobble around. You cannot easily slouch on that, you'll fall over. Mine can be height adjusted from 61 to 82cm, so I use it both while standing as a small break, but also while sitting. I'm still getting used to it and am experimenting with heights and best way to sit on it, but it's so far been a great addition and doesn't take up much space (a serious plus in my limited office space).\n\n## Monitor mounts\n\nLast but not least, I've got my two main monitors mounted on a **dual monitor mount**, in my case a [gas lift one from PureMounts](http://www.puremounts.de/pm-office-dm-23d.html) (the small third monitor is mounted to the second one with a self designed printed mounting solution). The stands usually included with monitors tend to not offer enough flexibility to truly dial in the position of the screen in my experience, and this also managed to free up a _ton_ of desktop real estate that I can now utilize. In my case, a wallmount is not an option due to the standing desk situation, so I instead went for a desk mount. A gas lift is not the most stable option in my experience: things can be a bit shaky when I accidentally bump against the desk due to the rather extreme lever position I had to chose to make things work in my office, but it has been working just fine now since 2012. Still, at some point I might get something a bit more static. In any case, a monitor mount is something I'd highly recommended for everyone really, even if you don't want if for ergonomic reasons -- I cannot emphasize the increase in desk space enough ;)\n\n![My monitors, mounted on a gas lift mount](./monitors.jpg)\n\n## tl;dr\n\nGet a split ergo keyboard, a gaming mouse for your primary and a trackball for your off hand. Don't cheap out on your office chair, seriously consider investment in a standing desk, get a balance board with it and finally reclaim your desk and improve your workplace's ergonomy at the same time with a monitor mount.\n","excerpt":"","published":"2021-03-13T00:00:00Z","readingtime":{"text":"8 min read","minutes":7.515,"time":450900,"words":1503}},{"slug":"2021-03-12-hello-world","published":"2021-03-12T23:00:00+0100","title":"Hello World!","subtitle":"The long overdue foosel.net reboot","image":{"url":"./new_start.jpg","alt":"The autumn sun seen through some trees, with the bottom covered in leaves"},"content":"\nIt's been a couple years since I last tried to maintain a blog. Back then I was still living life as a corporate drone,\nemployed as a Software Architect to consult other people on their IT problems. I rarely had anything I could blog about\n-- either things were under NDA, or they were simply uninteresting. Since then my life has been turned completely on its head.\nIn late 2012 I got myself a 3d printer, spent my Christmas break to develop a small web interface for it, that grew into a full\nsized Open Source project called [OctoPrint](https://octoprint.org) and these days I work full time on it.\n\nI've learned a lot not only on 3d printers & Python, but also on Open Source development, crowdfunding, the challenges of\ncommunity management, but also on work life balance, workplace ergonomics, home office life and stress management. And that's\njust from my job! In my personal life I've also spent a lot of time tinkering with electronics, learned how to bake bread,\ndiscovered cooking and went completely down the home automation rabbit hole.\n\nI don't know about you, but I think that should hopefully make for some good opportunities to blog again, and save some of\nmy learnings in a more persistent way than the ephemeral nature of twitter threads. So I did what apparently every dev seems\nto do in such a case and spent way too much time on a webpage reboot with some new tooling that I wanted to try anyway,\nand this is the result. This whole page is still a static page, but I've switched it from [Jekyll](https://jekyllrb.com)\nto [next.js](https://nextjs.org/). Why? I wanted to get some more hands-on experience with React since I'm evaluating it for a\nnew UI for OctoPrint, and I also never really warmed up to Ruby but know JS, so with expandability in mind this just feels like a\nbetter fit. If you want to study the source, you can find that [here](https://github.com/foosel/foosel.github.io) (but please\ndon't look too closely, I'm still learning and things are probably not even remotely optimally implemented).\n\nSo here we are, and it's time to fill this up a bit more. Thankfully I already got some ideas...\n","excerpt":"","readingtime":{"text":"2 min read","minutes":1.84,"time":110400,"words":368}}],"previous":null,"next":null},"__N_SSG":true}